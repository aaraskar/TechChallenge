package com.qa.utils;

import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.PrintStream;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import org.apache.log4j.Logger;

import com.qa.base.TestBase;
//import com.qa.test.WeatherAPITest2;

import io.restassured.builder.RequestSpecBuilder;
import io.restassured.builder.ResponseSpecBuilder;
import io.restassured.filter.log.RequestLoggingFilter;
import io.restassured.filter.log.ResponseLoggingFilter;
import io.restassured.http.ContentType;
import io.restassured.path.json.JsonPath;
import io.restassured.response.Response;
import io.restassured.specification.RequestSpecification;
import io.restassured.specification.ResponseSpecification;

/**
 * 
 * @author AjitRaskar This class provides various utility methods
 *
 */
public class Utility extends TestBase {

	public static Logger log = Logger.getLogger(Utility.class);

	public static Map<String, Double> dayAndTemperatureMap = new HashMap<>();
	public static Map<String, String> dayAndWeatherMap = new HashMap<>();

	public static Map<String, Double> dayAndTemperatureFullMap = new HashMap<>();
	public static Map<String, String> dayAndWeatherFullMap = new HashMap<>();
	public static int count = 0;
	public static int weatherDayCount = 0;
	public static String stringDay = "";
	public static String stringCurrentDate = "";
	public static RequestSpecification requestSpecification;
	public static ResponseSpecification responseSpecification;

	/**
	 * Converts Raw response into Json format
	 * 
	 * @param rawResponse This is Raw response generated by Weather API Client
	 * @return returns response in Json format
	 */
	public static JsonPath convertToJsonResponse(Response rawResponse) {

		String responseString = rawResponse.asString();
		JsonPath responseJson = new JsonPath(responseString);
		return responseJson;
	}

	/**
	 * Retrieves value for a given key from Json response
	 * 
	 * @param responseJson: This is response in Json format
	 * @param key:          This is a key whose value you want from Json response.
	 * @return value of key in String format
	 */
	public static String getValueFromJsonResponse(JsonPath responseJson, String key) {
		Object value = responseJson.get(key);
		return value.toString();
	}

	/**
	 * This method converts date in Unix,UTC format into formatted date
	 * 
	 * @param stringDate : This is a date in Unix,UTC format present in a Json  response
	 * @return Formatted version of Unix,UTC date
	 */

	public static String convertToDate(String stringDate) {
		long longDate = Long.parseLong(stringDate);
		Date date = new Date(longDate * 1000);
		SimpleDateFormat simpleDateFormat = new SimpleDateFormat("dd-MM-yyyy");
		String myDate = simpleDateFormat.format(date);
		return myDate;
	}

	/**
	 * This method parses the Json response and stores values in various maps based
	 * on provided conditions.
	 * 
	 * @param jsonResponse This is response in Json format
	 */

	public static void parseTheResponse(JsonPath jsonResponse) {
		stringCurrentDate = getValueFromJsonResponse(jsonResponse, "current.dt");
		String dailyLen = getValueFromJsonResponse(jsonResponse, "daily.size()");
		for (int j = 1; j <= Integer.parseInt(dailyLen) - 1; j++) {
			String stringTemperature = getValueFromJsonResponse(jsonResponse, "daily[" + j + "].temp.day");
			String stringWeather = getValueFromJsonResponse(jsonResponse, "daily[" + j + "].weather[0].main");
			double doubleTemperature = Double.parseDouble(stringTemperature);
			stringDay = getValueFromJsonResponse(jsonResponse, "daily[" + j + "].dt");
			dayAndTemperatureFullMap.put(stringDay, doubleTemperature);// Full map for day-temperature combination
			double temperature = Double.parseDouble(properties.getProperty("predictedTemperature"));
			if (doubleTemperature > temperature) {
				count++;
				stringDay = getValueFromJsonResponse(jsonResponse, "daily[" + j + "].dt");
				dayAndTemperatureMap.put(stringDay, doubleTemperature);

			}
			dayAndWeatherFullMap.put(stringDay, stringWeather); // Full map for day-weather combination
			if (stringWeather.equalsIgnoreCase(properties.getProperty("predictedWeatherType"))) {
				weatherDayCount++;
				dayAndWeatherMap.put(stringDay, stringWeather);

			}

		}

	}

	/**
	 * This method prints day and its temperature for all upcoming 7 days from
	 * current date
	 */
	public static void displayDayAndTempOfAllDays() {

		log.info("#########################################################################");
		log.info("Printing below details for location with latitude= " + properties.getProperty("latitude")
				+ " and longitude = " + properties.getProperty("longitude"));
		log.info("\n");
		log.info("Day and Predicted Temperature of all upcoming 7 days where current date is :"
				+ convertToDate(stringCurrentDate));

		for (String dayKey : dayAndTemperatureFullMap.keySet()) {

			log.info("Day :" + convertToDate(dayKey) + "(" + dayKey + ")" + ", Temperature : "
					+ dayAndTemperatureFullMap.get(dayKey) + " degrees");

		}

		log.info("\n");
		log.info("#########################################################################");

	}

	/**
	 * This method prints day and its temperature of those days where temperature is
	 * predicated to be above 20 degrees / or whatever predicted temperature is
	 * configured in config.properties.
	 */
	public static void displayDayAndTempOfSelectedDays() {
		log.info("\n");

		int size = dayAndTemperatureMap.size();
		if (size == 0) {

			log.info("There is no single day in next 7 days where temperature is predicated to be above "
					+ properties.getProperty("predictedTemperature") + " degrees");
		} else {

			log.info("Number of days which are predicted to be above " + properties.getProperty("predictedTemperature")
					+ " degrees are : " + count);
			log.info("Those days and their temperature are::");
			for (String dayKey : dayAndTemperatureMap.keySet()) {

				log.info("Day :" + convertToDate(dayKey) + "(" + dayKey + ")" + ", Temperature : "
						+ dayAndTemperatureMap.get(dayKey) + " degrees");

			}

		}

		log.info("\n");
		log.info("#########################################################################");

	}

	/**
	 * This method prints day and its weather type for all upcoming 7 days from
	 * current date.
	 */
	public static void displayDayAndWeatherOfAllDays() {

		log.info("Day and Predicted Weather of all upcoming 7 days where current date is :"
				+ convertToDate(stringCurrentDate));
		for (String dayKey : dayAndWeatherFullMap.keySet()) {

			log.info("Day :" + convertToDate(dayKey) + "(" + dayKey + ")" + ", Weather : "
					+ dayAndWeatherFullMap.get(dayKey));

		}

		log.info("\n");
		log.info("#########################################################################");

	}

	/**
	 * This method prints day and it's weather type of those days where weather type
	 * is predicated to be clear/sunny or whatever predicted weather type is
	 * configured in config.properties. It also prints number of days which will
	 * have predicted weather type configured in config.properties
	 */
	public static void displayDayAndWeatherOfSelectedDays() {

		int dayWeatherMapSize = dayAndWeatherMap.size();
		if (dayWeatherMapSize == 0) {

			log.info("There is no single sunny day in next 7 days");
		} else {

			String weatherType = properties.getProperty("predictedWeatherType");
			if (weatherType.equalsIgnoreCase("Clear")) {

				log.info("Number of Sunny Days are : " + weatherDayCount);
			} else if (weatherType.equalsIgnoreCase("Rain")) {

				log.info("Number of rainy Days are : " + weatherDayCount);
			}

			else if (weatherType.equalsIgnoreCase("Clouds")) {

				log.info("Number of cloudy days are : " + weatherDayCount);
			}

			log.info("Those days and their weather are::");
			for (String dayKey : dayAndWeatherMap.keySet()) {

				log.info("Day :" + convertToDate(dayKey) + "(" + dayKey + ")" + ", Weather : "
						+ dayAndWeatherMap.get(dayKey));

			}

			log.info("#########################################################################");
		}
	}

	/**
	 * This methods generates request based on the parameters passed in
	 * config.properties file. It also configures filters for request and response
	 * logging.
	 * 
	 * @return requestSpecification This is newly built request based on the
	 *         parameters.
	 * @throws FileNotFoundException
	 */

	public static RequestSpecification generateRequestSpecification() throws FileNotFoundException {

		PrintStream requestPrintStream = new PrintStream(
				new FileOutputStream(System.getProperty("user.dir") + "/target/request.log"));
		PrintStream responsePrintStream = new PrintStream(
				new FileOutputStream(System.getProperty("user.dir") + "/target/response.log"));
		RequestSpecBuilder requestBuilder = new RequestSpecBuilder();
		requestBuilder.setBaseUri(properties.getProperty("baseuri"));
		requestBuilder.addQueryParam("lat", properties.getProperty("latitude"));
		requestBuilder.addQueryParam("lon", properties.getProperty("longitude"));
		requestBuilder.addQueryParam("exclude", properties.getProperty("exclude"));
		requestBuilder.addQueryParam("appid", properties.getProperty("apiKey"));
		requestBuilder.addQueryParam("units", properties.getProperty("units"));
		requestBuilder.addFilter(RequestLoggingFilter.logRequestTo(requestPrintStream));// To generate log for request.
		requestBuilder.addFilter(ResponseLoggingFilter.logResponseTo(responsePrintStream));// To generate log for
																							// response.
		requestSpecification = requestBuilder.build();
		return requestSpecification;

	}

}
